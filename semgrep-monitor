#!/usr/bin/env python3
import argparse
import json
import os
import subprocess
import sys
from typing import Any, Dict
import urllib.error
import urllib.parse
import urllib.request

parser = argparse.ArgumentParser(description="Notify about Semgrep results.")
parser.add_argument("exitcode", type=int, help="Semgrep's exit code")
parser.add_argument("--slack-url", type=str, help="Slack webhook URL")
args = parser.parse_args()


repo_name = os.environ["GITHUB_REPOSITORY"]
repo_url = f"https://github.com/{repo_name}"
action_url = f"{repo_url}/actions/runs/{os.environ['GITHUB_RUN_ID']}"


def generate_message(notify_reason: str) -> Dict[str, Any]:
    return [
        {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": f":point_right: Semgrep Action {notify_reason} during *<{action_url}|a scan on {repo_name}>*",
            },
        },
        {
            "type": "section",
            "fields": [
                {"type": "mrkdwn", "text": f"*Repo:*\n<{repo_url}|{repo_name}>"},
                {
                    "type": "mrkdwn",
                    "text": f"*Triggered by:*\n{os.environ['GITHUB_ACTOR']}",
                },
                {
                    "type": "mrkdwn",
                    "text": f"*Scanned git ref:*\n`{os.environ['GITHUB_REF']}`",
                },
                {
                    "type": "mrkdwn",
                    "text": f"*Scanned git SHA:*\n`{os.environ['GITHUB_SHA'][:8]}`",
                },
            ],
        },
    ]


def main():
    if not args.slack_url:
        return  # user never configured this script, not printing anything

    print("== sending notifications if needed")

    notify_reason = None
    if args.exitcode == 2:
        notify_reason = "found issues"
    elif args.exitcode != 0:
        notify_reason = "encountered an error"

    if not notify_reason:
        print("not sending a notification, there's nothing to notify about")
        return

    payload = {
        "text": f"Semgrep Action {notify_reason} during a scan on {repo_name}",
        "blocks": generate_message(notify_reason),
        "icon_emoji": ":mag_right:",
        "username": "Semgrep",
    }
    try:
        urllib.request.urlopen(
            args.slack_url,
            urllib.parse.urlencode({"payload": json.dumps(payload)}).encode(),
        )
    except urllib.error.HTTPError as e:
        print(f"Slack returned this error: {e.read().decode()}")


if __name__ == "__main__":
    main()
